import {forwardRef, useMemo} from 'react'
import {useWindowDimensions, View} from 'react-native'
import {useTheme} from 'styled-components'

import {StyledBox} from './styled'
import {BoxProps} from './types'
import {createResponsiveStyles} from './utils'

export const Box = forwardRef<View, BoxProps>(
  (
    {
      children,
      style,
      p,
      px,
      py,
      pt,
      pb,
      pr,
      pl,
      m,
      mx,
      my,
      mt,
      mb,
      ml,
      mr,
      w,
      h,
      display,
      flexDirection,
      align,
      justify,
      wide,
      tall,
      wrap,
      flex,
      textAlign,
      aspectRatio,
      top,
      left,
      bottom,
      right,
      zIndex,
      grow,
      shrink,
      position,
      bg,
      borderRadius,
      borderColor,
      borderWidth,
      gap,
      maxH,
      maxW,
      minH,
      minW,
      overflow,
      overflowX,
      overflowY,
      borderBottomColor,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomWidth,
      borderLeft,
      borderLeftColor,
      borderLeftWidth,
      borderRight,
      borderRightColor,
      borderRightWidth,
      borderTop,
      borderTopColor,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopWidth,
      opacity,
      columnGap,
      rowGap,
      ...divProps
    },
    ref
  ) => {
    const {width} = useWindowDimensions()
    const theme = useTheme()

    const styles = useMemo(
      () =>
        createResponsiveStyles(
          {
            align,
            aspectRatio,
            bg,
            borderBottomColor,
            borderBottomLeftRadius,
            borderBottomRightRadius,
            borderBottomWidth,
            borderColor,
            borderLeft,
            borderLeftColor,
            borderLeftWidth,
            borderRadius,
            borderRight,
            borderRightColor,
            borderRightWidth,
            borderTop,
            borderTopColor,
            borderTopLeftRadius,
            borderTopRightRadius,
            borderTopWidth,
            borderWidth,
            bottom,
            columnGap,
            display,
            flex,
            flexDirection,
            gap,
            grow,
            h,
            justify,
            left,
            m,
            maxH,
            maxW,
            mb,
            minH,
            minW,
            ml,
            mr,
            mt,
            mx,
            my,
            opacity,
            overflow,
            overflowX,
            overflowY,
            p,
            pb,
            pl,
            position,
            pr,
            pt,
            px,
            py,
            right,
            rowGap,
            shrink,
            tall,
            textAlign,
            top,
            w,
            wide,
            wrap,
            zIndex,
          },
          theme
        ),
      [
        gap,
        align,
        aspectRatio,
        bg,
        borderBottomColor,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderBottomWidth,
        borderColor,
        borderLeft,
        borderLeftColor,
        borderLeftWidth,
        borderRadius,
        borderRight,
        borderRightColor,
        borderRightWidth,
        borderTop,
        borderTopColor,
        borderTopLeftRadius,
        borderTopRightRadius,
        borderTopWidth,
        borderWidth,
        bottom,
        flexDirection,
        display,
        flex,
        grow,
        h,
        justify,
        left,
        m,
        maxH,
        maxW,
        mb,
        minH,
        minW,
        ml,
        mr,
        mt,
        mx,
        my,
        overflow,
        overflowX,
        overflowY,
        p,
        pb,
        pl,
        position,
        pr,
        pt,
        px,
        py,
        right,
        shrink,
        tall,
        textAlign,
        theme,
        top,
        w,
        wide,
        wrap,
        zIndex,
        opacity,
        rowGap,
        columnGap,
      ]
    )

    return (
      <StyledBox ref={ref} style={style} deviceWidth={width} flexDirection={flexDirection} {...styles} {...divProps}>
        {children}
      </StyledBox>
    )
  }
)
